// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OtsServiceClient is the client API for OtsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OtsServiceClient interface {
	// StartLocalAgent starts a Mobile Object's Agent on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the ots/config.yaml
	//   3. all bytes constituting the Agent YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalAgent(ctx context.Context, opts ...grpc.CallOption) (OtsService_StartLocalAgentClient, error)
	// StartFromPreviousAgent starts a new Mobile Object's Agent based on a previous one.
	// If the previous Mobile Object's Agent does not have the can-replay condition set this call will result in an error.
	StartFromPreviousAgent(ctx context.Context, in *StartFromPreviousAgentRequest, opts ...grpc.CallOption) (*StartAgentResponse, error)
	// StartAgentRequest starts a new Mobile Object's Agent based on its specification.
	StartAgent(ctx context.Context, in *StartAgentRequest, opts ...grpc.CallOption) (*StartAgentResponse, error)
	// Searches for Mobile Object's Agent(s) known to this instance
	ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error)
	// Subscribe listens to new Mobile Object's Agent(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (OtsService_SubscribeClient, error)
	// GetAgent retrieves details of a single Mobile Object's Agent
	GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error)
	// Listen listens to Mobile Object's Agent updates and log output of a running Mobile Object's Agent
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (OtsService_ListenClient, error)
	// StopAgent stops a currently running Mobile Object's Agent
	StopAgent(ctx context.Context, in *StopAgentRequest, opts ...grpc.CallOption) (*StopAgentResponse, error)
}

type otsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOtsServiceClient(cc grpc.ClientConnInterface) OtsServiceClient {
	return &otsServiceClient{cc}
}

func (c *otsServiceClient) StartLocalAgent(ctx context.Context, opts ...grpc.CallOption) (OtsService_StartLocalAgentClient, error) {
	stream, err := c.cc.NewStream(ctx, &OtsService_ServiceDesc.Streams[0], "/v1.OtsService/StartLocalAgent", opts...)
	if err != nil {
		return nil, err
	}
	x := &otsServiceStartLocalAgentClient{stream}
	return x, nil
}

type OtsService_StartLocalAgentClient interface {
	Send(*StartLocalAgentRequest) error
	CloseAndRecv() (*StartAgentResponse, error)
	grpc.ClientStream
}

type otsServiceStartLocalAgentClient struct {
	grpc.ClientStream
}

func (x *otsServiceStartLocalAgentClient) Send(m *StartLocalAgentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *otsServiceStartLocalAgentClient) CloseAndRecv() (*StartAgentResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartAgentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *otsServiceClient) StartFromPreviousAgent(ctx context.Context, in *StartFromPreviousAgentRequest, opts ...grpc.CallOption) (*StartAgentResponse, error) {
	out := new(StartAgentResponse)
	err := c.cc.Invoke(ctx, "/v1.OtsService/StartFromPreviousAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otsServiceClient) StartAgent(ctx context.Context, in *StartAgentRequest, opts ...grpc.CallOption) (*StartAgentResponse, error) {
	out := new(StartAgentResponse)
	err := c.cc.Invoke(ctx, "/v1.OtsService/StartAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otsServiceClient) ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error) {
	out := new(ListAgentsResponse)
	err := c.cc.Invoke(ctx, "/v1.OtsService/ListAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otsServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (OtsService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &OtsService_ServiceDesc.Streams[1], "/v1.OtsService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &otsServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OtsService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type otsServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *otsServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *otsServiceClient) GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error) {
	out := new(GetAgentResponse)
	err := c.cc.Invoke(ctx, "/v1.OtsService/GetAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otsServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (OtsService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &OtsService_ServiceDesc.Streams[2], "/v1.OtsService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &otsServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OtsService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type otsServiceListenClient struct {
	grpc.ClientStream
}

func (x *otsServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *otsServiceClient) StopAgent(ctx context.Context, in *StopAgentRequest, opts ...grpc.CallOption) (*StopAgentResponse, error) {
	out := new(StopAgentResponse)
	err := c.cc.Invoke(ctx, "/v1.OtsService/StopAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtsServiceServer is the server API for OtsService service.
// All implementations must embed UnimplementedOtsServiceServer
// for forward compatibility
type OtsServiceServer interface {
	// StartLocalAgent starts a Mobile Object's Agent on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the ots/config.yaml
	//   3. all bytes constituting the Agent YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalAgent(OtsService_StartLocalAgentServer) error
	// StartFromPreviousAgent starts a new Mobile Object's Agent based on a previous one.
	// If the previous Mobile Object's Agent does not have the can-replay condition set this call will result in an error.
	StartFromPreviousAgent(context.Context, *StartFromPreviousAgentRequest) (*StartAgentResponse, error)
	// StartAgentRequest starts a new Mobile Object's Agent based on its specification.
	StartAgent(context.Context, *StartAgentRequest) (*StartAgentResponse, error)
	// Searches for Mobile Object's Agent(s) known to this instance
	ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error)
	// Subscribe listens to new Mobile Object's Agent(s) updates
	Subscribe(*SubscribeRequest, OtsService_SubscribeServer) error
	// GetAgent retrieves details of a single Mobile Object's Agent
	GetAgent(context.Context, *GetAgentRequest) (*GetAgentResponse, error)
	// Listen listens to Mobile Object's Agent updates and log output of a running Mobile Object's Agent
	Listen(*ListenRequest, OtsService_ListenServer) error
	// StopAgent stops a currently running Mobile Object's Agent
	StopAgent(context.Context, *StopAgentRequest) (*StopAgentResponse, error)
	mustEmbedUnimplementedOtsServiceServer()
}

// UnimplementedOtsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOtsServiceServer struct {
}

func (UnimplementedOtsServiceServer) StartLocalAgent(OtsService_StartLocalAgentServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalAgent not implemented")
}
func (UnimplementedOtsServiceServer) StartFromPreviousAgent(context.Context, *StartFromPreviousAgentRequest) (*StartAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousAgent not implemented")
}
func (UnimplementedOtsServiceServer) StartAgent(context.Context, *StartAgentRequest) (*StartAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAgent not implemented")
}
func (UnimplementedOtsServiceServer) ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedOtsServiceServer) Subscribe(*SubscribeRequest, OtsService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedOtsServiceServer) GetAgent(context.Context, *GetAgentRequest) (*GetAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgent not implemented")
}
func (UnimplementedOtsServiceServer) Listen(*ListenRequest, OtsService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedOtsServiceServer) StopAgent(context.Context, *StopAgentRequest) (*StopAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAgent not implemented")
}
func (UnimplementedOtsServiceServer) mustEmbedUnimplementedOtsServiceServer() {}

// UnsafeOtsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OtsServiceServer will
// result in compilation errors.
type UnsafeOtsServiceServer interface {
	mustEmbedUnimplementedOtsServiceServer()
}

func RegisterOtsServiceServer(s grpc.ServiceRegistrar, srv OtsServiceServer) {
	s.RegisterService(&OtsService_ServiceDesc, srv)
}

func _OtsService_StartLocalAgent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OtsServiceServer).StartLocalAgent(&otsServiceStartLocalAgentServer{stream})
}

type OtsService_StartLocalAgentServer interface {
	SendAndClose(*StartAgentResponse) error
	Recv() (*StartLocalAgentRequest, error)
	grpc.ServerStream
}

type otsServiceStartLocalAgentServer struct {
	grpc.ServerStream
}

func (x *otsServiceStartLocalAgentServer) SendAndClose(m *StartAgentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *otsServiceStartLocalAgentServer) Recv() (*StartLocalAgentRequest, error) {
	m := new(StartLocalAgentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OtsService_StartFromPreviousAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtsServiceServer).StartFromPreviousAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OtsService/StartFromPreviousAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtsServiceServer).StartFromPreviousAgent(ctx, req.(*StartFromPreviousAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtsService_StartAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtsServiceServer).StartAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OtsService/StartAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtsServiceServer).StartAgent(ctx, req.(*StartAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtsService_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtsServiceServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OtsService/ListAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtsServiceServer).ListAgents(ctx, req.(*ListAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtsService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OtsServiceServer).Subscribe(m, &otsServiceSubscribeServer{stream})
}

type OtsService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type otsServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *otsServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OtsService_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtsServiceServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OtsService/GetAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtsServiceServer).GetAgent(ctx, req.(*GetAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtsService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OtsServiceServer).Listen(m, &otsServiceListenServer{stream})
}

type OtsService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type otsServiceListenServer struct {
	grpc.ServerStream
}

func (x *otsServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OtsService_StopAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtsServiceServer).StopAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OtsService/StopAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtsServiceServer).StopAgent(ctx, req.(*StopAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OtsService_ServiceDesc is the grpc.ServiceDesc for OtsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OtsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.OtsService",
	HandlerType: (*OtsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousAgent",
			Handler:    _OtsService_StartFromPreviousAgent_Handler,
		},
		{
			MethodName: "StartAgent",
			Handler:    _OtsService_StartAgent_Handler,
		},
		{
			MethodName: "ListAgents",
			Handler:    _OtsService_ListAgents_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _OtsService_GetAgent_Handler,
		},
		{
			MethodName: "StopAgent",
			Handler:    _OtsService_StopAgent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalAgent",
			Handler:       _OtsService_StartLocalAgent_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _OtsService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _OtsService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ots.proto",
}
